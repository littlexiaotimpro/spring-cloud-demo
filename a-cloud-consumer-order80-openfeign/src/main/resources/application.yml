server:
  port: 80

spring:
  application:
    name: cloud-order-service

eureka:
  client:
    # 将当前服务注册进Eureka服务注册中心，默认为 true
    register-with-eureka: true
    # 是否从 Eureka Server 抓取已有的注册服务，默认为 true（ps：单节点无所谓，汲取必须设置为true才能配合ribbon使用负载均衡）。
    fetchRegistry: true
    serviceUrl:
      # 集群部署
      defaultZone: http://server7001.com:7001/eureka/
  instance:
    instance-id: order80
    prefer-ip-address: true

# feign 启用断路器配置
feign:
  hystrix:
    enabled: true
  httpclient:
    enabled: true
    # 禁用ssl验证，默认 false
    disable-ssl-validation: false
    # 重定向配置，默认 true
    follow-redirects: false

# 服务降级配置
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            # 服务降级超时时间，需要配合ribbon及feign的超时时间
            timeoutInMilliseconds: 15000

# ribbon 公共配置
ribbon:
  ConnectTimeout: 6000 #服务请求连接超时时间（毫秒）
  ReadTimeout: 6000 #服务请求处理超时时间（毫秒）
  OkToRetryOnAllOperations: true #对超时请求启用重试机制
  MaxAutoRetriesNextServer: 1 #切换重试实例的最大个数
  MaxAutoRetries: 1 # 切换实例后重试最大次数
  #  com.netflix.loadbalancer.RandomRule：从提供服务的实例中以随机的方式；
  #  com.netflix.loadbalancer.RoundRobinRule：以线性轮询的方式，就是维护一个计数器，从提供服务的实例中按顺序选取，第一次选第一个，第二次选第二个，以此类推，到最后一个以后再从头来过；
  #  com.netflix.loadbalancer.RetryRule：在RoundRobinRule的基础上添加重试机制，即在指定的重试时间内，反复使用线性轮询策略来选择可用实例；
  #  com.netflix.loadbalancer.WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择；
  #  com.netflix.loadbalancer.BestAvailableRule：选择并发较小的实例；
  #  com.netflix.loadbalancer.AvailabilityFilteringRule：先过滤掉故障实例，再选择并发较小的实例；
  #  com.netflix.loadbalancer.ZoneAwareLoadBalancer：采用双重过滤，同时过滤不是同一区域的实例和故障实例，选择并发较小的实例。
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule

# 日志级别设置
logging:
  level:
    # feign 服务调用接口的日志级别
    com.spring.cloud.consumer.order.service.PaymentService: debug
