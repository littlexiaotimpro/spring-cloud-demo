server:
  port: 80

spring:
  application:
    name: spring-cloud-demo-client

eureka:
  client:
    register-with-eureka: true # 将当前服务注册进Eureka服务注册中心，默认为 true
    fetchRegistry: true # 是否从 Eureka Server 抓取已有的注册服务，默认为 true（ps：单节点无所谓，汲取必须设置为true才能配合ribbon使用负载均衡）。
    serviceUrl:
      defaultZone: http://localhost:7001/eureka/

# Swagger 属性配置
#swagger:
#  enable: true
#  application-name: ${spring.application.name}
#  version: 1.0
#  description: ${spring.application.name} 整合 swagger 3.0
#  try-host: http://localhost:${server.port}

# 负载均衡全局配置
# 可以在配置前加上服务应用名称，为指定服务添加配置
# cloud-provider-log:
ribbon:
  ConnectTimeout: 1000 #服务请求连接超时时间（毫秒）
  ReadTimeout: 3000 #服务请求处理超时时间（毫秒）
  OkToRetryOnAllOperations: true #对超时请求启用重试机制
  MaxAutoRetriesNextServer: 1 #切换重试实例的最大个数
  MaxAutoRetries: 1 # 切换实例后重试最大次数
#  com.netflix.loadbalancer.RandomRule：从提供服务的实例中以随机的方式；
#  com.netflix.loadbalancer.RoundRobinRule：以线性轮询的方式，就是维护一个计数器，从提供服务的实例中按顺序选取，第一次选第一个，第二次选第二个，以此类推，到最后一个以后再从头来过；
#  com.netflix.loadbalancer.RetryRule：在RoundRobinRule的基础上添加重试机制，即在指定的重试时间内，反复使用线性轮询策略来选择可用实例；
#  com.netflix.loadbalancer.WeightedResponseTimeRule：对RoundRobinRule的扩展，响应速度越快的实例选择权重越大，越容易被选择；
#  com.netflix.loadbalancer.BestAvailableRule：选择并发较小的实例；
#  com.netflix.loadbalancer.AvailabilityFilteringRule：先过滤掉故障实例，再选择并发较小的实例；
#  com.netflix.loadbalancer.ZoneAwareLoadBalancer：采用双重过滤，同时过滤不是同一区域的实例和故障实例，选择并发较小的实例。
  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #修改负载均衡算法

service-url:
  cloud-provider-log: http://127.0.0.1:8001/log
  cloud-provider-user: http://127.0.0.1:8002/user